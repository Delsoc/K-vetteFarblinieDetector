function [undistortedImage, cameraParams] = undistordImage(RGB)
    % Auto-generated by cameraCalibrator app on 15-Apr-2022
    %-------------------------------------------------------
    
    
    % Define images to process
    imageFileNames = {'C:\Users\Dilso\Desktop\BiderBVM\schachbrett\image3.jpg',...
        'C:\Users\Dilso\Desktop\BiderBVM\schachbrett\image4.jpg',...
        'C:\Users\Dilso\Desktop\BiderBVM\schachbrett\image6.jpg',...
        'C:\Users\Dilso\Desktop\BiderBVM\schachbrett\image9.jpg',...
        'C:\Users\Dilso\Desktop\BiderBVM\schachbrett\image11.jpg',...
        'C:\Users\Dilso\Desktop\BiderBVM\schachbrett\image13.jpg',...
        'C:\Users\Dilso\Desktop\BiderBVM\schachbrett\image15.jpg',...
        'C:\Users\Dilso\Desktop\BiderBVM\schachbrett\image17.jpg',...
        'C:\Users\Dilso\Desktop\BiderBVM\schachbrett\image18.jpg',...
        'C:\Users\Dilso\Desktop\BiderBVM\schachbrett\image20.jpg',...
        'C:\Users\Dilso\Desktop\BiderBVM\schachbrett\image21.jpg',...
        };
    % Detect calibration pattern in images
    detector = vision.calibration.monocular.CheckerboardDetector();
    [imagePoints, imagesUsed] = detectPatternPoints(detector, imageFileNames);
    imageFileNames = imageFileNames(imagesUsed);
    
    % Read the first image to obtain image size
    originalImage = imread(imageFileNames{1});
    [mrows, ncols, ~] = size(originalImage);
    
    % Generate world coordinates for the planar pattern keypoints
    squareSize = 5;  % in units of 'millimeters'
    worldPoints = generateWorldPoints(detector, 'SquareSize', squareSize);
    
    % Calibrate the camera
    [cameraParams, imagesUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
        'EstimateSkew', false, 'EstimateTangentialDistortion', false, ...
        'NumRadialDistortionCoefficients', 3, 'WorldUnits', 'millimeters', ...
        'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
        'ImageSize', [mrows, ncols]);
    
    % View reprojection errors
    h1=figure; showReprojectionErrors(cameraParams);
    
    % Visualize pattern locations
    h2=figure; showExtrinsics(cameraParams, 'CameraCentric');
    
    % Display parameter estimation errors
    displayErrors(estimationErrors, cameraParams);
    
    % For example, you can use the calibration data to remove effects of lens distortion.
    undistortedImage = undistortImage(RGB, cameraParams);
    
    % See additional examples of how to use the calibration data.  At the prompt type:
    % showdemo('MeasuringPlanarObjectsExample')
    % showdemo('StructureFromMotionExample')

end